name: Deploy Infraestrutura de Computa√ß√£o

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  TF_VERSION: '1.5.0'
  ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
  ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
  ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
  ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

jobs:
  terraform:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout do c√≥digo
      - name: 'Checkout code'
        uses: actions/checkout@v4

      # 2. Login no Azure
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3. Setup do Terraform
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # 4. Terraform Format Check
      - name: 'Terraform Format Check'
        run: |
          echo "üîç Checking Terraform formatting..."
          terraform fmt -check -recursive
        continue-on-error: true

      # 5. Terraform Init
      - name: 'Terraform Init'
        run: |
          echo "üîß Initializing Terraform..."
          terraform init
          echo "‚úÖ Terraform initialized!"

      # 6. Terraform Validate
      - name: 'Terraform Validate'
        run: |
          echo "‚úÖ Validating Terraform configuration..."
          terraform validate
          echo "‚úÖ Configuration is valid!"

      # 7. Terraform Plan
      - name: 'Terraform Plan'
        run: |
          echo "üìã Planning infrastructure changes..."
          terraform plan -out=tfplan
          echo "‚úÖ Plan complete!"

      # 8. Terraform Apply (s√≥ na main e push)
      - name: 'Terraform Apply'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üöÄ Applying infrastructure changes..."
          echo "üì¶ Creating: AKS, ACR, Function App, Application Gateway..."
          terraform apply -auto-approve tfplan
          echo "‚úÖ Compute infrastructure deployed successfully!"

      # 9. Terraform Output 
      - name: 'Show Terraform Outputs'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üìä Compute Infrastructure Outputs:"
          terraform output -json
          echo ""
          echo "üîç Important URLs:"
          echo "ACR Login Server: $(terraform output -raw acr_login_server)"
          echo "AKS Cluster: $(terraform output -raw aks_cluster_name)"
          echo "Function App: $(terraform output -raw function_app_default_hostname)"

      # 10. Configura kubeconfig do AKS  
      - name: 'Get AKS credentials'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üîê Getting AKS credentials..."
          AKS_NAME=$(terraform output -raw aks_cluster_name)
          az aks get-credentials --resource-group rg-tchungry-prod --name $AKS_NAME --overwrite-existing
          echo "‚úÖ kubectl configured!"

      # 11. Verifica status do AKS  
      - name: 'Verify AKS status'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üîç Checking AKS cluster status..."
          kubectl get nodes
          echo ""
          echo "üì¶ Checking namespaces:"
          kubectl get namespaces
          echo ""
          echo "üîß Checking AGIC pods:"
          kubectl get pods -n kube-system -l app=ingress-appgw
          echo "‚úÖ AKS cluster is healthy!"

      # 12. Verifica Function App 
      - name: 'Verify Function App status'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üîç Checking Function App status..."
          FUNC_NAME=$(terraform output -raw function_app_name)
          az functionapp show --name $FUNC_NAME --resource-group rg-tchungry-prod --query "{name:name, state:state, publicNetworkAccess:publicNetworkAccess}" -o table
          echo "‚úÖ Function App is ready!"

      # 12.1. Garante integra√ß√£o AKS-ACR  
      - name: 'Ensure AKS-ACR integration'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üîó Ensuring AKS-ACR integration..."
          AKS_NAME=$(terraform output -raw aks_cluster_name)
          ACR_NAME=$(terraform output -raw acr_name)
          az aks update --name $AKS_NAME --resource-group rg-tchungry-prod --attach-acr $ACR_NAME
          echo "‚úÖ AKS-ACR integration configured!"

      # 12.2. Verifica role assignments  
      - name: 'Verify AKS role assignments'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üîç Checking AKS role assignments..."
          ACR_ID=$(terraform output -raw acr_name)
          az role assignment list --scope /subscriptions/$(az account show --query id -o tsv)/resourceGroups/rg-tchungry-prod/providers/Microsoft.ContainerRegistry/registries/$ACR_ID --query "[?roleDefinitionName=='AcrPull'].{Role:roleDefinitionName, Principal:principalName}" -o table
          echo "‚úÖ Role assignments verified!"

      # 13. Logout do Azure
      - name: 'Azure Logout'
        if: always()
        run: |
          az logout
          echo "‚úÖ Logged out from Azure"